apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Text splitting pipeline2"}'
    sidecar.istio.io/inject: 'false'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"print-text": [], "print-text-2": [], "split-text-lines2":
      [["even_lines", "$(workspaces.split-text-lines2.path)/split-text-lines2-even_lines"],
      ["odd_lines", "$(workspaces.split-text-lines2.path)/split-text-lines2-odd_lines"]]}'
    tekton.dev/input_artifacts: '{"print-text": [{"name": "split-text-lines2-odd_lines",
      "parent_task": "split-text-lines2"}], "print-text-2": [{"name": "split-text-lines2-even_lines",
      "parent_task": "split-text-lines2"}]}'
    tekton.dev/output_artifacts: '{"split-text-lines2": [{"key": "artifacts/$PIPELINERUN/split-text-lines2/even_lines.tgz",
      "name": "split-text-lines2-even_lines", "path": "/tmp/outputs/even_lines/data"},
      {"key": "artifacts/$PIPELINERUN/split-text-lines2/odd_lines.tgz", "name": "split-text-lines2-odd_lines",
      "path": "/tmp/outputs/odd_lines/data"}]}'
  name: text-splitting-pipeline2
spec:
  pipelineSpec:
    tasks:
    - name: split-text-lines2
      taskSpec:
        stepTemplate:
          volumeMounts:
          - mountPath: /tmp/inputs/source
            name: source
        steps:
        - image: busybox
          name: copy-inputs
          script: '#!/bin/sh

            set -exo pipefail

            echo -n "one

            two

            three

            four

            five

            six

            seven

            eight

            nine

            ten" > /tmp/inputs/source/data

            '
        - args:
          - --source
          - /tmp/inputs/source/data
          - --odd-lines
          - $(workspaces.split-text-lines2.path)/split-text-lines2-odd_lines
          - --even-lines
          - $(workspaces.split-text-lines2.path)/split-text-lines2-even_lines
          command:
          - python3
          - -u
          - -c
          - "def _parent_dirs_maker_that_returns_open_file(mode: str, encoding: str\
            \ = None):\n    def make_parent_dirs_and_return_path(file_path: str):\n\
            \        import os\n        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n\
            \        return open(file_path, mode=mode, encoding=encoding)\n    return\
            \ make_parent_dirs_and_return_path\n\ndef split_text_lines2(source_file,\
            \ odd_lines_file, even_lines_file):\n    while True:\n        line = source_file.readline()\n\
            \        if line == \"\":\n            break\n        odd_lines_file.write(line)\n\
            \        line = source_file.readline()\n        if line == \"\":\n   \
            \         break\n        even_lines_file.write(line)\n\nimport argparse\n\
            _parser = argparse.ArgumentParser(prog='Split text lines2', description='')\n\
            _parser.add_argument(\"--source\", dest=\"source_file\", type=argparse.FileType('rt'),\
            \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--odd-lines\"\
            , dest=\"odd_lines_file\", type=_parent_dirs_maker_that_returns_open_file('wt'),\
            \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--even-lines\"\
            , dest=\"even_lines_file\", type=_parent_dirs_maker_that_returns_open_file('wt'),\
            \ required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
            \n_outputs = split_text_lines2(**_parsed_args)\n"
          image: python:3.7
          name: main
        volumes:
        - emptyDir: {}
          name: source
        workspaces:
        - name: split-text-lines2
      workspaces:
      - name: split-text-lines2
        workspace: text-splitting-pipeline2
    - name: print-text
      runAfter:
      - split-text-lines2
      taskSpec:
        steps:
        - args:
          - --text
          - $(workspaces.print-text.path)/split-text-lines2-odd_lines
          command:
          - python3
          - -u
          - -c
          - "def print_text(text_path): # The \"text\" input is untyped so that any\
            \ data can be printed\n    '''Print text'''\n    with open(text_path,\
            \ 'r') as reader:\n        for line in reader:\n            print(line,\
            \ end = '')\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print\
            \ text', description='Print text')\n_parser.add_argument(\"--text\", dest=\"\
            text_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args\
            \ = vars(_parser.parse_args())\n\n_outputs = print_text(**_parsed_args)\n"
          image: python:3.7
          name: main
        workspaces:
        - name: print-text
      workspaces:
      - name: print-text
        workspace: text-splitting-pipeline2
    - name: print-text-2
      runAfter:
      - split-text-lines2
      taskSpec:
        steps:
        - args:
          - --text
          - $(workspaces.print-text-2.path)/split-text-lines2-even_lines
          command:
          - python3
          - -u
          - -c
          - "def print_text(text_path): # The \"text\" input is untyped so that any\
            \ data can be printed\n    '''Print text'''\n    with open(text_path,\
            \ 'r') as reader:\n        for line in reader:\n            print(line,\
            \ end = '')\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print\
            \ text', description='Print text')\n_parser.add_argument(\"--text\", dest=\"\
            text_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args\
            \ = vars(_parser.parse_args())\n\n_outputs = print_text(**_parsed_args)\n"
          image: python:3.7
          name: main
        workspaces:
        - name: print-text-2
      workspaces:
      - name: print-text-2
        workspace: text-splitting-pipeline2
    workspaces:
    - name: text-splitting-pipeline2
  workspaces:
  - name: text-splitting-pipeline2
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: 2Gi
