apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Print repeating lines pipeline"}'
    sidecar.istio.io/inject: 'false'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"print-text": [], "repeat-line": [["output_text",
      "$(workspaces.repeat-line.path)/repeat-line-output_text"]]}'
    tekton.dev/input_artifacts: '{"print-text": [{"name": "repeat-line-output_text",
      "parent_task": "repeat-line"}]}'
    tekton.dev/output_artifacts: '{"repeat-line": [{"key": "artifacts/$PIPELINERUN/repeat-line/output_text.tgz",
      "name": "repeat-line-output_text", "path": "/tmp/outputs/output_text/data"}]}'
  name: print-repeating-lines-pipeline
spec:
  pipelineSpec:
    tasks:
    - name: repeat-line
      taskSpec:
        steps:
        - args:
          - --line
          - Hello
          - --count
          - '5000'
          - --output-text
          - $(workspaces.repeat-line.path)/repeat-line-output_text
          command:
          - python3
          - -u
          - -c
          - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n\
            \    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return\
            \ file_path\n\ndef repeat_line(line, output_text_path, count = 10):\n\
            \    '''Repeat the line specified number of times'''\n    with open(output_text_path,\
            \ 'w') as writer:\n        for i in range(count):\n            writer.write(line\
            \ + '\\n')\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Repeat\
            \ line', description='Repeat the line specified number of times')\n_parser.add_argument(\"\
            --line\", dest=\"line\", type=str, required=True, default=argparse.SUPPRESS)\n\
            _parser.add_argument(\"--count\", dest=\"count\", type=int, required=False,\
            \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-text\",\
            \ dest=\"output_text_path\", type=_make_parent_dirs_and_return_path, required=True,\
            \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
            \n_outputs = repeat_line(**_parsed_args)\n"
          image: python:3.7
          name: main
        workspaces:
        - name: repeat-line
      workspaces:
      - name: repeat-line
        workspace: print-repeating-lines-pipeline
    - name: print-text
      runAfter:
      - repeat-line
      taskSpec:
        steps:
        - args:
          - --text
          - $(workspaces.print-text.path)/repeat-line-output_text
          command:
          - python3
          - -u
          - -c
          - "def print_text(text_path): # The \"text\" input is untyped so that any\
            \ data can be printed\n    '''Print text'''\n    with open(text_path,\
            \ 'r') as reader:\n        for line in reader:\n            print(line,\
            \ end = '')\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print\
            \ text', description='Print text')\n_parser.add_argument(\"--text\", dest=\"\
            text_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args\
            \ = vars(_parser.parse_args())\n\n_outputs = print_text(**_parsed_args)\n"
          image: python:3.7
          name: main
        workspaces:
        - name: print-text
      workspaces:
      - name: print-text
        workspace: print-repeating-lines-pipeline
    workspaces:
    - name: print-repeating-lines-pipeline
  workspaces:
  - name: print-repeating-lines-pipeline
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: 2Gi
